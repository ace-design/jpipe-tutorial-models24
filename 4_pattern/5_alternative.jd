pattern reproducibility {
    
    conclusion shareable is "Notebook can be shared"
    strategy gate        is "Assess quality gates are met"
    gate supports shareable
    @support repro  is "Execution environment is reproducible"
    repro    supports gate
    @support fair is "Notebook code quality is fair"
    fair     supports gate 
}

justification pinned_paths implements reproducibility {

    sub-conclusion repro is "Execution environment is reproducible"
    strategy       s0   is "Verify dependencies version are correctly pinned"
    evidence       e0   is "Pipenv file exists"
    s0 supports repro
    e0  supports s0

    sub-conclusion fair is "Notebook code quality is fair"
    
    strategy      all_paths is "all checks are OK"
    all_paths supports fair

    sub-conclusion static is "static paths are part of the repository"
    strategy       s2     is "Verify static paths"
    evidence e1           is "notebook file exists"
    e1     supports s2
    s2     supports static
    static supports all_paths

    sub-conclusion no_dyn is "No dynamic paths are used"
    strategy       s3     is "Record dynamic paths oath"
    evidence       e      is "Developer ensures absence of dynamic paths"
    no_dyn supports all_paths
    s3     supports no_dyn
    e supports s3

}